var St = Object.defineProperty;
var Ct = (r, t, e) => t in r ? St(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e;
var d = (r, t, e) => (Ct(r, typeof t != "symbol" ? t + "" : t, e), e);
import { openBlock as f, createElementBlock as D, renderSlot as B, createElementVNode as C, ref as g, computed as S, unref as h, defineComponent as $, reactive as b, onBeforeUpdate as lt, normalizeStyle as H, Fragment as Q, renderList as tt, createBlock as w, resolveDynamicComponent as F, mergeProps as U, onMounted as at, onUnmounted as ct, createCommentVNode as O, nextTick as Z, shallowReactive as ot, watch as it, toRaw as mt, normalizeClass as nt, createTextVNode as Pt, toDisplayString as wt, withCtx as N, Transition as zt, createVNode as q } from "vue";
const Lt = (r, t) => {
  const e = r.__vccOpts || r;
  for (const [o, s] of t)
    e[o] = s;
  return e;
}, Rt = {}, Tt = {
  type: "button",
  class: "flux-button",
  style: { outline: "0" }
}, Ft = {
  viewBox: "0 0 100 100",
  xmlns: "http://www.w3.org/2000/svg",
  version: "1.1"
}, Et = /* @__PURE__ */ C("circle", {
  cx: "50",
  cy: "50",
  r: "50"
}, null, -1), Ot = { viewBox: "-20 -20 140 140" };
function Vt(r, t) {
  return f(), D("button", Tt, [
    (f(), D("svg", Ft, [
      Et,
      (f(), D("svg", Ot, [
        B(r.$slots, "default")
      ]))
    ]))
  ]);
}
const et = /* @__PURE__ */ Lt(Rt, [["render", Vt]]), ut = ({ width: r, height: t }) => Math.ceil(Math.sqrt(r * r + t * t)), $t = ({
  width: r,
  height: t
}) => r / t, Bt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  aspectRatio: $t,
  diag: ut
}, Symbol.toStringTag, { value: "Module" }));
class K {
  constructor({
    top: t = null,
    left: e = null
  } = {
    top: null,
    left: null
  }) {
    d(this, "top", g(null));
    d(this, "left", g(null));
    this.update({ top: t, left: e });
  }
  reset() {
    this.top.value = null, this.left.value = null;
  }
  isValid() {
    return ![this.top.value, this.left.value].includes(null);
  }
  update({ top: t, left: e }) {
    this.top.value = t ?? null, this.left.value = e ?? null;
  }
  toValue() {
    const t = {
      top: void 0,
      left: void 0
    };
    return this.top.value !== null && (t.top = this.top.value), this.left.value !== null && (t.left = this.left.value), t;
  }
  toPx() {
    if (!this.isValid())
      throw new RangeError("Invalid position in pixels");
    return {
      top: this.top.value.toString() + "px",
      left: this.left.value.toString() + "px"
    };
  }
}
class Mt {
  constructor(t, e, o = A.fill, s = null, n, c, a) {
    d(this, "src");
    d(this, "loader", null);
    d(this, "errorMessage");
    d(this, "status", g(I.notLoaded));
    d(this, "realSize", new T());
    d(this, "displaySize", new T());
    d(this, "caption", "");
    d(this, "resizeType");
    d(this, "backgroundColor", null);
    d(this, "display");
    d(this, "transition");
    d(this, "isLoading", () => this.status.value === I.loading);
    d(this, "isLoaded", () => this.status.value === I.loaded);
    d(this, "isError", () => this.status.value === I.error);
    d(this, "resizeProps", S(() => this.calcResizeProps(this.displaySize)));
    this.src = t, this.caption = e, this.resizeType = o, this.backgroundColor = s, this.display = n, this.transition = c, this.errorMessage = a;
  }
  calcResizeProps(t) {
    if ([t.isValid(), this.realSize.isValid()].includes(!1))
      return {};
    const e = new At(this.realSize), { size: o, position: s } = e.resizeTo(t, this.resizeType);
    return {
      ...o.toValue(),
      ...s.toValue()
    };
  }
  getResizeProps(t, e) {
    const o = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
    return this.displaySize.isValid() || this.displaySize.update(t.toValue()), Object.assign(
      o,
      t.equals(this.displaySize) ? this.resizeProps.value : this.calcResizeProps(t)
    ), e !== void 0 && (o.top -= e.top.value || 0, o.left -= e.left.value || 0), o;
  }
}
class Ye extends Mt {
  constructor(t, e = "", o = A.fill, s = null) {
    const n = {
      component: rt,
      props: {}
    }, c = {
      component: rt,
      props: {}
    }, a = `Image ${t} could not be loaded`;
    super(
      t,
      e,
      o,
      s,
      n,
      c,
      a
    );
  }
  load() {
    return this.loader !== null ? this.loader : (this.loader = new Promise((t, e) => {
      this.status.value = I.loading;
      const o = new Image();
      o.onload = () => this.onLoad(o, t), o.onerror = () => this.onError(e), o.src = this.src;
    }), this.loader);
  }
  onLoad(t, e) {
    this.realSize = new T({
      width: t.naturalWidth || t.width,
      height: t.naturalHeight || t.height
    }), this.status.value = I.loaded, e();
  }
  onError(t) {
    this.status.value = I.error, t(this.errorMessage);
  }
}
var _t = /* @__PURE__ */ ((r) => (r.notLoaded = "notLoaded", r.loading = "loading", r.loaded = "loaded", r.error = "error", r))(_t || {});
const I = _t;
var bt = /* @__PURE__ */ ((r) => (r.fill = "fill", r.fit = "fit", r))(bt || {});
const A = bt, yt = (r) => r >= 1 ? "landscape" : "portrait";
class At {
  constructor(t) {
    d(this, "realSize");
    d(this, "realAspectRatio");
    d(this, "realOrientation");
    if (t.isValid() === !1)
      throw new RangeError("Invalid real size");
    this.realSize = t, this.realAspectRatio = this.realSize.getAspectRatio(), this.realOrientation = yt(this.realAspectRatio);
  }
  resizeTo(t, e) {
    if (t.isValid() === !1)
      throw new RangeError("Invalid size to resize");
    const o = t.getAspectRatio(), s = yt(o), n = this.getAdaptedSize(
      t,
      o,
      s,
      e
    ), c = this.getAdaptedPosition(
      t,
      o,
      n,
      e
    );
    return {
      size: n,
      position: c
    };
  }
  getAdaptedSize(t, e, o, s) {
    return o === "landscape" && this.realOrientation === "portrait" && s === A.fill ? this.getAdaptedSizeByWith(t) : o === "landscape" && this.realOrientation === "landscape" && e >= this.realAspectRatio && s === A.fill ? this.getAdaptedSizeByWith(t) : o === "landscape" && this.realOrientation === "landscape" && e < this.realAspectRatio && s === A.fit ? this.getAdaptedSizeByWith(t) : o === "portrait" && this.realOrientation === "landscape" && s === A.fit ? this.getAdaptedSizeByWith(t) : o === "portrait" && this.realOrientation === "portrait" && e > this.realAspectRatio && s === A.fill ? this.getAdaptedSizeByWith(t) : o === "portrait" && this.realOrientation === "portrait" && e <= this.realAspectRatio && s === A.fit ? this.getAdaptedSizeByWith(t) : this.getAdaptedSizeByHeight(t);
  }
  getAdaptedSizeByWith(t) {
    return new T({
      width: t.width.value,
      height: t.width.value / this.realAspectRatio
    });
  }
  getAdaptedSizeByHeight(t) {
    return new T({
      width: this.realAspectRatio * t.height.value,
      height: t.height.value
    });
  }
  getAdaptedPosition(t, e, o, s) {
    return this.realAspectRatio <= e && s === A.fill ? this.getAdaptedPositionVertically(t, o) : this.realAspectRatio > e && s === A.fit ? this.getAdaptedPositionVertically(t, o) : this.getAdaptedPositionHorizontally(t, o);
  }
  getAdaptedPositionVertically(t, e) {
    return new K({
      top: (t.height.value - e.height.value) / 2,
      left: 0
    });
  }
  getAdaptedPositionHorizontally(t, e) {
    return new K({
      top: 0,
      left: (t.width.value - e.width.value) / 2
    });
  }
}
class Wt {
  constructor(t, e, o, s, n, c, a, u) {
    d(this, "rscs", []);
    d(this, "counter", {
      success: 0,
      error: 0,
      total: 0
    });
    d(this, "toPreload");
    d(this, "preLoading", []);
    d(this, "lazyLoading", []);
    d(this, "progress", g(0));
    d(this, "displaySize");
    d(this, "onPreloadStart");
    d(this, "onPreloadEnd");
    d(this, "onLazyLoadStart");
    d(this, "onLazyLoadEnd");
    d(this, "isCancelled", !1);
    d(this, "reject");
    this.rscs = t, this.toPreload = e > t.length ? t.length : e, this.displaySize = o, this.onPreloadStart = s, this.onPreloadEnd = n, this.onLazyLoadStart = c, this.onLazyLoadEnd = a, this.reject = u, this.preloadStart();
  }
  preloadStart() {
    this.onPreloadStart();
    const { counter: t } = this, e = this.rscs.slice(
      t.total,
      t.total + this.toPreload - t.success
    );
    this.preLoading = this.preLoading.concat(e), e.forEach((o) => this.load(o));
  }
  preloadEnd() {
    const { counter: t, toPreload: e } = this;
    if (t.success < e && t.total < this.rscs.length) {
      this.preloadStart();
      return;
    }
    const o = this.preLoading.filter(
      (s) => s.resource.isLoaded()
    );
    this.onPreloadEnd(o), this.preLoading.length = 0, t.total < this.rscs.length && this.lazyLoadStart();
  }
  lazyLoadStart() {
    this.onLazyLoadStart(), this.lazyLoading = this.rscs.slice(this.counter.total), this.lazyLoading.forEach((t) => this.load(t));
  }
  lazyLoadEnd() {
    const t = this.lazyLoading.filter(
      (e) => e.resource.isLoaded()
    );
    this.onLazyLoadEnd(t), this.lazyLoading.length = 0;
  }
  load(t) {
    t.resource.load().then(() => {
      this.loadSuccess(t);
    }).catch((e) => {
      this.loadError(e);
    }).finally(() => {
      this.counter.total++, !this.isCancelled && (this.preLoading.length !== 0 && this.updateProgress(), this.counter.total === this.toPreload ? this.preloadEnd() : this.counter.total === this.rscs.length && this.lazyLoadEnd());
    });
  }
  loadSuccess(t) {
    this.counter.success++, !this.isCancelled && t.resource.displaySize.update(this.displaySize.toValue());
  }
  loadError(t) {
    this.counter.error++, !this.isCancelled && console.error(t);
  }
  updateProgress() {
    this.progress.value = Math.ceil(this.counter.success * 100 / this.toPreload) || 0;
  }
  hasFinished() {
    return this.counter.total === this.rscs.length;
  }
  cancel() {
    this.isCancelled = !0, this.reject("Resources loading cancelled", this.rscs);
  }
}
class T {
  constructor({
    width: t = null,
    height: e = null
  } = { width: null, height: null }) {
    d(this, "width", g(null));
    d(this, "height", g(null));
    this.update({ width: t, height: e });
  }
  reset() {
    this.width.value = null, this.height.value = null;
  }
  isValid() {
    return ![this.width.value, this.height.value].includes(null);
  }
  update({
    width: t,
    height: e
  }) {
    this.width.value = t ?? null, this.height.value = e ?? null;
  }
  getAspectRatio() {
    if (!this.isValid())
      throw new RangeError("Could not get aspect ratio due to invalid size");
    return $t(
      this.toValue()
    );
  }
  clone() {
    return new T(this.toValue());
  }
  equals(t) {
    return !(this.width.value !== t.width.value || this.height.value !== t.height.value);
  }
  toValue() {
    const t = {};
    return this.width.value !== null && (t.width = this.width.value), this.height.value !== null && (t.height = this.height.value), t;
  }
  toPx() {
    if (!this.isValid())
      throw new RangeError("Invalid size in pixels");
    return {
      width: this.width.value.toString() + "px",
      height: this.height.value.toString() + "px"
    };
  }
}
function st(r, t, e) {
  e.base === void 0 && (e.base = {});
  const o = S(() => {
    const { size: l, viewSize: i = new T() } = t, { width: p = l.width.value, height: m = l.height.value } = i.toValue(), y = new T({ width: p, height: m });
    return y.isValid() ? y.toPx() : {};
  }), s = S(() => ({
    ...h(o),
    ...h(e.color),
    ...h(e.rsc),
    ...h(t.css),
    ...h(e.base)
  })), n = (l) => {
    Object.assign(e.base, l);
  };
  return {
    style: s,
    setCss: n,
    transform: (l) => {
      r.value !== null && (r.value.clientHeight, n(l));
    },
    show: () => {
      n({
        visibility: "visible"
      });
    },
    hide: () => {
      n({
        visibility: "hidden"
      });
    }
  };
}
const gt = {
  x: {
    top: "90",
    bottom: "-90"
  },
  y: {
    back: "180",
    backr: "180",
    backl: "-180",
    left: "-90",
    right: "90"
  }
}, vt = {
  x: {
    left: "-50",
    right: "50"
  },
  y: {
    top: "-50",
    bottom: "50"
  }
};
class Nt {
  constructor(t, e, o) {
    d(this, "depth");
    d(this, "size");
    d(this, "viewSize");
    d(this, "translateZ", S(() => {
      const t = this.depth / 2, { width: e, height: o } = this.size.toValue(), { width: s, height: n } = this.viewSize.toValue();
      return {
        front: 0,
        back: this.depth,
        backr: this.depth,
        backl: this.depth,
        left: t,
        right: (s ?? e) - t,
        top: t,
        bottom: (n ?? o) - t
      };
    }));
    this.depth = t, this.size = e, this.viewSize = o;
  }
  getRotate(t) {
    const e = gt.x[t] ?? "0", o = gt.y[t] ?? "0";
    return `rotateX(${e}deg) rotateY(${o}deg)`;
  }
  getTranslate(t) {
    const e = vt.x[t] ?? "0", o = vt.y[t] ?? "0", s = this.translateZ.value[t].toString();
    return `translate3d(${e}%, ${o}%, ${s}px)`;
  }
  getSideCss(t) {
    return `${this.getRotate(t)} ${this.getTranslate(t)}`;
  }
}
class Xt {
  static getProps(t, e, o, s, n) {
    const { depth: c, size: a, viewSize: u } = t, l = {
      name: e,
      component: s ? s.transition.component : rt,
      color: o,
      rsc: s,
      size: a.clone(),
      viewSize: u.clone(),
      offset: n,
      style: {
        position: "absolute",
        transform: t.getSideCss(e),
        backfaceVisibility: "hidden"
      }
    };
    return ["left", "right"].includes(e) && (l.viewSize.width.value = c, l.size.width.value = c), ["top", "bottom"].includes(e) && (l.viewSize.height.value = c, l.size.height.value = c), l;
  }
}
var W = /* @__PURE__ */ ((r) => (r.front = "front", r.back = "back", r.left = "left", r.right = "right", r.top = "top", r.bottom = "bottom", r))(W || {});
function jt(r, t, e) {
  return !!(t && t[r] || e && e[r]);
}
function Yt(r, t, e, o) {
  const s = Object.values(W);
  return r || e ? s : Object.values(W).filter(
    (n) => jt(n, t, o)
  );
}
class Ht {
  static getSidesProps(t, e, o, s, n, c, a) {
    const u = Yt(e, o, s, n), l = {};
    return u.forEach((i) => {
      l[i] = Xt.getProps(
        t,
        i,
        o && o[i] ? o[i] : e,
        n && n[i] ? n[i] : s,
        a && a[i] ? a[i] : c
      );
    }), l;
  }
}
const pt = /* @__PURE__ */ $({
  __name: "FluxCube",
  props: {
    colors: { default: () => ({}) },
    rscs: { default: () => ({}) },
    offsets: { default: () => ({}) },
    depth: { default: 0 },
    origin: {},
    color: {},
    rsc: {},
    size: {},
    viewSize: { default: () => new T() },
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = S(
      () => e.origin !== void 0 ? e.origin : `center center -${e.depth / 2}px`
    ), n = b({
      base: {
        transformStyle: "preserve-3d",
        transformOrigin: s
      }
    }), { style: c, setCss: a, transform: u, show: l, hide: i } = st(
      o,
      e,
      n
    ), p = S(
      () => new Nt(e.depth, e.size, e.viewSize)
    ), m = S(
      () => Ht.getSidesProps(
        p.value,
        e.color,
        e.colors,
        e.rsc,
        e.rscs,
        e.offset,
        e.offsets
      )
    ), y = b({});
    return lt(() => {
      Object.assign(y, {
        [W.front]: void 0,
        [W.back]: void 0,
        [W.left]: void 0,
        [W.right]: void 0,
        [W.top]: void 0,
        [W.bottom]: void 0
      });
    }), t({
      setCss: a,
      transform: u,
      show: l,
      hide: i,
      turn: (v) => u({ transform: p.value.getRotate(v) })
    }), (v, x) => (f(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-cube",
      style: H(h(c))
    }, [
      (f(!0), D(Q, null, tt(m.value, (E) => (f(), w(F(E.component), U({
        ref_for: !0,
        ref: (V) => y[E.name] = V,
        key: E.name
      }, E), null, 16))), 128))
    ], 4));
  }
});
var G = /* @__PURE__ */ ((r) => (r.front = "front", r.back = "back", r.backr = "backr", r.backl = "backl", r.left = "left", r.right = "right", r.top = "top", r.bottom = "bottom", r))(G || {});
function xt(r, t) {
  return Math.floor(r / t);
}
function kt(r, t) {
  return r % t;
}
class It {
  static getProps(t, e) {
    let { width: o, height: s } = e.size.toValue();
    const n = xt(e.number, t.numCols), c = kt(e.number, t.numCols), a = {
      color: t.color,
      colors: t.colors,
      rsc: t.rsc,
      rscs: t.rscs,
      size: t.size,
      depth: t.depth,
      offset: new K({
        top: n * s,
        left: c * o
      })
    };
    return n + 1 === t.numRows && (s = t.size.height.value - n * s), c + 1 === t.numCols && (o = t.size.width.value - c * o), a.viewSize = new T({
      width: o,
      height: s
    }), a.css = {
      ...e.css,
      position: "absolute",
      ...a.offset.toPx(),
      zIndex: e.number + 1 < t.numTiles / 2 ? e.number + 1 : t.numTiles - e.number
    }, a;
  }
}
class Gt {
  static getTilesProps(t) {
    const { rows: e, cols: o, size: s, color: n, colors: c, rsc: a, rscs: u, depth: l } = t, i = Math.ceil(e), p = Math.ceil(o), m = {
      numRows: i,
      numCols: p,
      numTiles: i * p,
      size: s,
      depth: l,
      color: n,
      colors: c,
      rsc: a,
      rscs: u
    }, y = {
      number: 0,
      size: new T({
        width: Math.floor(s.width.value / p),
        height: Math.floor(s.height.value / i)
      }),
      css: t.tileCss
    }, _ = [];
    for (let v = 0; v < m.numTiles; v++)
      y.number = v, _.push(It.getProps(m, y));
    return _;
  }
}
const X = /* @__PURE__ */ $({
  __name: "FluxGrid",
  props: {
    colors: {},
    rscs: {},
    rows: { default: 1 },
    cols: { default: 1 },
    depth: { default: 0 },
    tileCss: {},
    color: {},
    rsc: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      base: {
        position: "relative"
      }
    }), { style: n, setCss: c, show: a, hide: u } = st(
      o,
      e,
      s
    ), l = S(
      () => {
        var y;
        return e.rscs !== void 0 ? pt : (y = e.rsc) == null ? void 0 : y.transition.component;
      }
    ), i = S(() => Gt.getTilesProps(e)), p = g([]);
    return lt(() => {
      p.value = [];
    }), t({
      setCss: c,
      transform: (y) => {
        p.value.forEach((_, v) => y(_, v));
      },
      show: a,
      hide: u,
      getRowNumber: xt,
      getColNumber: kt
    }), (y, _) => (f(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-grid",
      style: H(h(n))
    }, [
      (f(!0), D(Q, null, tt(i.value, (v, x) => (f(), w(F(l.value), U({
        ref_for: !0,
        ref: (E) => p.value.push(E),
        key: x
      }, v), null, 16))), 128))
    ], 4));
  }
}), rt = /* @__PURE__ */ $({
  __name: "FluxImage",
  props: {
    color: {},
    rsc: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      base: {
        overflow: "hidden"
      },
      color: S(() => {
        var p, m;
        const i = {};
        return e.color !== void 0 && (i.backgroundColor = e.color), ((p = e.rsc) == null ? void 0 : p.backgroundColor) !== null && (i.backgroundColor = (m = e.rsc) == null ? void 0 : m.backgroundColor), i;
      }),
      rsc: S(() => {
        const { rsc: i, size: p, offset: m } = e;
        if (!i)
          return {};
        if (i.status.value === I.notLoaded)
          return i.load(), {};
        if (!i.isLoaded() || !p.isValid() || !o.value)
          return {};
        const { width: y, height: _, top: v, left: x } = i.getResizeProps(p, m);
        return {
          backgroundImage: `url(${i.src})`,
          backgroundSize: `${y}px ${_}px`,
          backgroundPosition: `${x}px ${v}px`,
          backgroundRepeat: "no-repeat"
        };
      })
    }), { style: n, setCss: c, transform: a, show: u, hide: l } = st(
      o,
      e,
      s
    );
    return t({
      setCss: c,
      transform: a,
      show: u,
      hide: l
    }), (i, p) => (f(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-image",
      style: H(h(n))
    }, null, 4));
  }
}), He = /* @__PURE__ */ $({
  __name: "FluxParallax",
  props: {
    rsc: {},
    holder: { default: () => window },
    type: { default: "relative" },
    offset: { default: "100%" }
  },
  setup(r, { expose: t }) {
    const { aspectRatio: e } = Bt, o = r, s = g(null), { holder: n, rsc: c } = o, a = {
      base: {
        position: "relative",
        background: `url("${c.src}") no-repeat`
      },
      defined: b({}),
      final: S(() => ({
        ...a.base,
        ...h(a.defined)
      }))
    }, u = /iPad|iPhone|iPod/.test(navigator.userAgent) || navigator.userAgent === "MacIntel" && navigator.maxTouchPoints > 1, l = b({
      width: 0,
      height: 0,
      aspectRatio: S(() => e(l))
    }), i = b({
      top: 0,
      width: 0,
      height: 0,
      aspectRatio: S(() => e(i))
    }), p = b({
      top: 0,
      left: 0,
      width: 0,
      height: 0
    }), m = {
      position: "absolute",
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      clip: "rect(auto auto auto auto)"
    }, y = S(() => ({
      position: "absolute",
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      background: `url("${c.src}") no-repeat center center fixed`,
      backgroundSize: `${p.width}px ${p.height}px`
    })), _ = S(() => {
      const { offset: k } = o, R = parseFloat(k);
      return /^[0-9]+px$/.test(k) ? {
        px: R,
        pct: R * 100 / p.height
      } : /^[0-9]+%$/.test(k) ? {
        px: Math.ceil(i.height * R / 100),
        pct: R
      } : {
        px: 0,
        pct: 0
      };
    }), v = S(() => {
      const k = u ? l.height : i.height + _.value.px;
      return p.height - k;
    });
    at(() => {
      window.addEventListener("resize", x, {
        passive: !0
      }), (o.type !== "fixed" || u) && n.addEventListener("scroll", V, {
        passive: !0
      }), c.load().then(() => {
        x();
      });
    }), ct(() => {
      window.removeEventListener("resize", x), n.removeEventListener("scroll", V);
    });
    const x = () => {
      l.width = n.scrollWidth || n.innerWidth, l.height = n.scrollHeight || n.innerHeight, i.width = s.value.clientWidth, i.height = s.value.clientHeight, i.top = s.value.getBoundingClientRect().top + window.scrollY, c.displaySize.update(l);
      const k = c.resizeProps.value;
      p.width = k.width, p.height = k.height, a.defined.backgroundSize = `${p.width}px ${p.height}px`, a.defined.backgroundPosition = "center 0", V();
    }, E = (k) => {
      v.value > 0 && (k = k * _.value.pct / 100 + 50 - _.value.pct / 2), a.defined.backgroundPositionY = k.toFixed(2) + "%";
    }, V = () => {
      if (!c.isLoaded() || !u && o.type === "fixed")
        return;
      const k = n.scrollY || n.scrollTop || 0;
      if (n !== window)
        return J.relative(k);
      if (k + l.height < i.top || k > i.top + i.height)
        return;
      const R = k - i.top + l.height;
      J[o.type](R);
    }, J = {
      visible: (k) => {
        let R = 0;
        k < i.height ? R = 0 : k > l.height ? R = 100 : R = (k - i.height) * 100 / (l.height - i.height), E(R);
      },
      relative: (k) => {
        let R;
        n === window ? R = k * 100 / (l.height + i.height) : R = k * 100 / (l.height - n.clientHeight), E(R);
      },
      fixed: (k) => {
        a.defined.backgroundPositionY = k - l.height + "px";
      }
    };
    return t({
      resize: x
    }), (k, R) => (f(), D("div", {
      ref_key: "$el",
      ref: s,
      class: "flux-parallax",
      style: H(a.final.value)
    }, [
      o.type === "fixed" && !h(u) ? (f(), D("div", {
        key: 0,
        style: m
      }, [
        C("div", {
          class: "image",
          style: H(y.value)
        }, null, 4)
      ])) : O("", !0),
      B(k.$slots, "default")
    ], 4));
  }
}), Kt = /* @__PURE__ */ $({
  __name: "FluxTransition",
  props: {
    size: {},
    transition: {},
    from: {},
    to: {},
    displayComponent: {},
    options: { default: () => ({}) }
  },
  emits: ["ready", "start", "end"],
  setup(r, { expose: t, emit: e }) {
    const o = r, s = g(null), n = g(null), c = e, a = b({
      base: {
        overflow: "hidden",
        perspective: "none",
        zIndex: 3
      }
    }), u = S(() => {
      const { width: m, height: y } = o.size.toPx();
      return {
        ...a.base,
        width: m,
        height: y
      };
    }), l = g(1);
    at(async () => {
      await Z(), n.value !== null && (l.value = n.value.totalDuration), c("ready", {
        transition: o.transition,
        from: o.from,
        to: o.to,
        options: o.options,
        duration: l.value
      });
    });
    async function i() {
      c("start", {
        transition: o.transition,
        from: o.from,
        to: o.to,
        options: o.options,
        duration: l.value
      }), await Z(), n.value === null ? console.error("Transition component not available", o.transition) : n.value.onPlay(), setTimeout(() => p(), l.value);
    }
    function p() {
      c("end", {
        transition: o.transition,
        from: o.from,
        to: o.to,
        options: o.options,
        duration: l.value
      });
    }
    return ct(() => {
      o.displayComponent && o.displayComponent.show();
    }), t({ start: i }), (m, y) => (f(), D("div", {
      ref_key: "$el",
      ref: s,
      class: "flux-transition",
      style: H(u.value)
    }, [
      (f(), w(F(m.transition), {
        ref_key: "$transition",
        ref: n,
        size: m.size,
        from: m.from,
        to: m.to,
        "display-component": m.displayComponent,
        options: m.options,
        "mask-style": a.base
      }, null, 8, ["size", "from", "to", "display-component", "options", "mask-style"]))
    ], 4));
  }
});
class Ut {
  static getProps(t, e, o) {
    const s = (t.numCircles - e) * t.radius * 2, n = t.radius * e, c = new K({
      top: t.topGap + n,
      left: t.leftGap + n
    });
    return {
      offset: c,
      css: {
        ...o,
        ...c.toPx(),
        position: "absolute",
        width: s + "px",
        height: s + "px",
        backgroundRepeat: "repeat",
        borderRadius: "50%",
        zIndex: e
      }
    };
  }
}
class Jt {
  static getCirclesProps(t) {
    const { width: e, height: o } = t.size.toValue(), s = Math.round(t.circles), n = ut({ width: e, height: o }), c = Math.ceil(n / 2 / s), a = Math.ceil(o / 2 - c * s), u = Math.ceil(e / 2 - c * s), l = {
      numCircles: s,
      diagonal: n,
      radius: c,
      topGap: a,
      leftGap: u
    }, i = [];
    for (let p = 0; p < s; p++)
      i.push(
        Ut.getProps(l, p, t.tileCss)
      );
    return i;
  }
}
const Dt = /* @__PURE__ */ $({
  __name: "FluxVortex",
  props: {
    rsc: {},
    circles: { default: 1 },
    tileCss: {},
    color: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      base: {
        position: "relative",
        overflow: "hidden"
      }
    }), { style: n, setCss: c, show: a, hide: u } = st(
      o,
      e,
      s
    ), l = S(() => Jt.getCirclesProps(e)), i = g([]);
    return lt(() => {
      i.value = [];
    }), t({
      setCss: c,
      transform: (m) => {
        i.value.forEach((y, _) => m(y, _));
      },
      show: a,
      hide: u
    }), (m, y) => (f(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-vortex",
      style: H(h(n))
    }, [
      (f(!0), D(Q, null, tt(l.value, (_, v) => (f(), w(F(m.rsc.transition.component), {
        ref_for: !0,
        ref: (x) => i.value.push(x),
        key: v,
        size: m.size,
        rsc: m.rsc,
        offset: _.offset,
        css: _.css
      }, null, 8, ["size", "rsc", "offset", "css"]))), 128))
    ], 4));
  }
}), ht = /* @__PURE__ */ $({
  __name: "FluxWrapper",
  props: {
    color: {},
    rsc: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      base: {
        overflow: "hidden"
      }
    }), { style: n, setCss: c, transform: a, show: u, hide: l } = st(
      o,
      e,
      s
    );
    return t({
      setCss: c,
      transform: a,
      show: u,
      hide: l
    }), (i, p) => (f(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-wrapper",
      style: H(h(n))
    }, [
      B(i.$slots, "default")
    ], 4));
  }
});
var z = /* @__PURE__ */ ((r) => (r.prev = "prev", r.next = "next", r))(z || {}), Y = /* @__PURE__ */ ((r) => (r.stopped = "stopped", r.playing = "playing", r))(Y || {});
class Zt {
  constructor() {
    d(this, "current", null);
    d(this, "from", null);
    d(this, "to", null);
  }
  reset() {
    this.current = null, this.from = null, this.to = null;
  }
  init(t) {
    this.current = t.getFirst();
  }
  currentSameAs(t) {
    return this.current.index === t.index;
  }
  prepareTo(t) {
    this.from = this.current, this.to = t;
  }
}
class qt {
  constructor() {
    d(this, "current", null);
    d(this, "last", null);
  }
  reset() {
    this.current = null, this.last = null;
  }
  init(t) {
    this.last = t.getLast();
  }
  setCurrentFinished() {
    this.last = this.current, this.current = null;
  }
}
class Qt {
  static withOptions(t) {
    return t.map((e) => {
      let o = e, s = {};
      return "resource" in e && (o = e.resource, "options" in e && (s = e.options)), { resource: o, options: s };
    });
  }
}
class te {
  constructor(t) {
    d(this, "list", ot([]));
    d(this, "loader", g(null));
    d(this, "emit");
    this.emit = t;
  }
  getPrev(t) {
    return this.getByIndex(
      t > 0 ? t - 1 : this.list.length - 1
    );
  }
  getNext(t) {
    return this.getByIndex(
      t === this.list.length - 1 ? 0 : t + 1
    );
  }
  getFirst() {
    return this.getByIndex(0);
  }
  getLast() {
    return this.getByOrder(z.prev, 0);
  }
  getByIndex(t) {
    if (this.list[t] === void 0)
      throw new ReferenceError(`Resource index ${t} not found`);
    return {
      index: t,
      rsc: this.list[t].resource,
      options: JSON.parse(JSON.stringify(this.list[t].options))
    };
  }
  getByOrder(t, e) {
    return {
      prev: () => this.getPrev(e),
      next: () => this.getNext(e)
    }[t]();
  }
  find(t, e) {
    if (typeof t == "number")
      return this.getByIndex(t);
    if (e === void 0)
      throw new ReferenceError("Missing currentIndex parameter");
    return this.getByOrder(t, e);
  }
  update(t, e, o) {
    var c, a;
    ((c = this.loader.value) == null ? void 0 : c.hasFinished()) === !1 && ((a = this.loader.value) == null || a.cancel()), this.list.splice(0);
    const s = Qt.withOptions(t);
    return new Promise((u, l) => {
      this.loader.value = new Wt(
        s,
        e,
        o,
        () => this.preloadStart(),
        (i) => this.preloadEnd(i, u),
        () => this.lazyLoadStart(),
        (i) => this.lazyLoadEnd(i),
        l
      );
    });
  }
  preloadStart() {
    this.emit("resourcesPreloadStart");
  }
  preloadEnd(t, e) {
    this.list.push(...t), this.emit("resourcesPreloadEnd"), e();
  }
  lazyLoadStart() {
    this.emit("resourcesLazyloadStart");
  }
  lazyLoadEnd(t) {
    this.list.push(...t), this.emit("resourcesLazyloadEnd");
  }
}
class ee {
  static withOptions(t) {
    return t.map((e) => {
      let o = e, s = {};
      return "component" in e && (o = e.component, "options" in e && (s = e.options)), { component: o, options: s };
    });
  }
}
class se {
  constructor() {
    d(this, "list", ot([]));
  }
  getPrev(t) {
    return this.getByIndex(
      t > 0 ? t - 1 : this.list.length - 1
    );
  }
  getNext(t) {
    return this.getByIndex(
      t === this.list.length - 1 ? 0 : t + 1
    );
  }
  getFirst() {
    return this.getByIndex(0);
  }
  getLast() {
    return this.getByOrder(z.prev, 0);
  }
  getByIndex(t) {
    return {
      index: t,
      component: this.list[t].component,
      options: JSON.parse(JSON.stringify(this.list[t].options))
    };
  }
  getByOrder(t, e) {
    return {
      prev: () => this.getPrev(e),
      next: () => this.getNext(e)
    }[t]();
  }
  update(t) {
    this.list.splice(0);
    const e = ee.withOptions(t);
    this.list.push(...e);
  }
}
class oe {
  constructor(t, e, o) {
    d(this, "resource");
    d(this, "transition");
    d(this, "status", g(Y.stopped));
    d(this, "config");
    d(this, "timers");
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    d(this, "emit");
    d(this, "resources");
    d(this, "transitions");
    d(this, "$displayComponent", g(null));
    this.config = t, this.timers = e, this.emit = o, this.resources = new te(o), this.transitions = new se(), this.resource = ot(new Zt()), this.transition = ot(new qt());
  }
  setup(t) {
    this.$displayComponent = t;
  }
  play(t = z.next, e) {
    var a, u;
    const { config: o, timers: s, resource: n } = this;
    if (this.status.value = Y.playing, this.transition.current !== null)
      return;
    const c = (u = this.resources) == null ? void 0 : u.find(t, (a = n.current) == null ? void 0 : a.index);
    s.set(
      "transition",
      e || (c == null ? void 0 : c.options.delay) || o.delay,
      () => {
        this.show(t);
      }
    ), this.emit("play", t, e);
  }
  async stop(t = !1) {
    const { timers: e } = this;
    this.status.value = Y.stopped, e.clear("transition"), this.transition.current !== null && t === !0 && await this.end(t), this.emit("stop");
  }
  isReadyToShow() {
    if (this.resource.current === null)
      throw new ReferenceError("Current resource not set");
    if (this.resources === null)
      throw new ReferenceError("Resources list not set");
    if (this.resources.list.length === 0)
      throw new RangeError("Resources list empty");
    if (this.transition.last === null)
      throw new ReferenceError("Last transition not set");
    if (this.transitions === null)
      throw new ReferenceError("Transitions list not set");
    if (this.transitions.list.length === 0)
      throw new RangeError("Transitions list empty");
    if (this.$displayComponent.value === null)
      throw new ReferenceError("Display component not set");
    return !0;
  }
  async show(t = z.next, e = z.next) {
    if (!this.isReadyToShow())
      return;
    const { resource: o, resources: s, config: n, transitions: c } = this;
    if (this.transition.current !== null) {
      n.allowToSkipTransition && (await this.end(!0), this.show(t, e));
      return;
    }
    const a = s.find(
      t,
      o.current.index
    );
    if (o.currentSameAs(a))
      return;
    o.prepareTo(a), this.timers.clear("transition");
    const u = typeof e == "number" ? c.getByIndex(e) : c.getByOrder(
      e,
      this.transition.last.index
    );
    u.options.direction === void 0 && (typeof t != "number" ? u.options.direction = t : u.options.direction = this.resource.from.index < this.resource.to.index ? z.next : z.prev), this.transition.current = u, this.emit("show", this.resource, this.transition);
  }
  start() {
    this.resource.current = this.resource.to, this.emit("transitionStart", this.resource, this.transition);
  }
  async end(t = !1) {
    const { config: e, resource: o, resources: s, timers: n, transition: c } = this;
    if (!(o.current === null || s === null)) {
      if (c.setCurrentFinished(), await Z(), t === !0 ? this.emit("transitionCancel", this.resource, this.transition) : this.emit("transitionEnd", this.resource, this.transition), this.shouldStopPlaying(
        e.infinite,
        o.current,
        s.list.length - 1
      )) {
        this.stop();
        return;
      }
      this.shouldPlayNext() && n.set(
        "transition",
        o.current.options.delay || e.delay,
        () => {
          this.show();
        }
      );
    }
  }
  shouldStopPlaying(t, e, o) {
    return t === !1 && e.index >= o && this.status.value === Y.playing || e.options.stop === !0;
  }
  shouldPlayNext() {
    return this.status.value === Y.playing;
  }
}
class dt {
  constructor(t, e = null, o = null) {
    d(this, "node");
    d(this, "config");
    d(this, "emit", null);
    d(this, "size", new T());
    d(this, "inFullScreen", () => !!document.fullscreenElement);
    this.node = t, this.config = e, this.emit = o;
  }
  static async getSize(t) {
    const e = new dt(t);
    return await e.updateSize(), e.size;
  }
  addResizeListener() {
    window.addEventListener("resize", () => this.updateSize(), {
      passive: !0
    });
  }
  removeResizeListener() {
    window.removeEventListener("resize", this.updateSize);
  }
  getAspectRatio() {
    if (this.config !== null) {
      const [t, e] = this.config.aspectRatio.split(":");
      return [parseFloat(t), parseFloat(e)];
    }
    return [16, 9];
  }
  async updateSize() {
    if (this.size.reset(), await Z(), this.node.value === null)
      return;
    const t = getComputedStyle(this.node.value), e = parseFloat(t.width);
    let o = parseFloat(t.height);
    if (["0px", "auto", null].includes(t.height)) {
      const [s, n] = this.getAspectRatio();
      o = e / s * n;
    }
    this.size.update({
      width: e,
      height: o
    });
  }
  toggleFullScreen() {
    this.inFullScreen() ? this.exitFullScreen() : this.enterFullScreen();
  }
  async enterFullScreen() {
    var t, e;
    ((t = this.node) == null ? void 0 : t.value) === null || !((e = this.config) != null && e.allowFullscreen) || (await this.node.value.requestFullscreen(), this.emit !== null && this.emit("fullscreenEnter"));
  }
  async exitFullScreen() {
    await document.exitFullscreen(), this.emit !== null && this.emit("fullscreenExit");
  }
}
class ne {
  constructor(t, e) {
    d(this, "config");
    d(this, "player");
    this.config = t, this.player = e;
  }
  setup() {
    this.removeKeyListener(), this.config.bindKeys && this.addKeyListener();
  }
  addKeyListener() {
    window.addEventListener("keydown", (t) => this.keydown(t), {
      passive: !0
    });
  }
  removeKeyListener() {
    window.removeEventListener("keydown", () => this.keydown);
  }
  keydown(t) {
    if (["ArrowLeft", "Left"].includes(t.key)) {
      this.player.show(z.prev);
      return;
    }
    if (["ArrowRight", "Right"].includes(t.key)) {
      this.player.show(z.next);
      return;
    }
  }
}
class ie {
  constructor() {
    d(this, "isOver", g(!1));
  }
  setup(t, e) {
    e.clear("mouseOver"), t.autohideTime === 0 && (this.isOver.value = !0);
  }
  toggle(t, e, o) {
    t.autohideTime !== 0 && (this.isOver.value = o, this[o ? "over" : "out"](t, e));
  }
  out(t, e) {
    e.clear("mouseOver");
  }
  over(t, e) {
    e.set(
      "mouseOver",
      t.autohideTime,
      () => this.isOver.value = !1
    );
  }
}
class re {
  constructor() {
    d(this, "timers", {});
  }
  set(t, e, o) {
    this.clear(t), this.timers[t] = setTimeout(o, e);
  }
  clear(t) {
    (t !== void 0 ? [t] : Object.keys(this.timers)).forEach((o) => {
      clearTimeout(this.timers[o]), delete this.timers[o];
    });
  }
}
class le {
  constructor() {
    d(this, "startX", 0);
    d(this, "startY", 0);
    d(this, "startTime", 0);
    d(this, "endTime", 0);
    d(this, "prevTouchTime", 0);
    // Max distance in pixels from start until end
    d(this, "tapThreshold", 5);
    // Max time in ms from first to second tap
    d(this, "doubleTapThreshold", 200);
    // Distance in percentage to trigger slide
    d(this, "slideTrigger", 0.3);
    d(this, "tap", (t, e) => Math.abs(t) < this.tapThreshold && Math.abs(e) < this.tapThreshold);
    d(this, "doubleTap", () => this.endTime - this.prevTouchTime < this.doubleTapThreshold);
    d(this, "slideLeft", (t, e) => e.size.isValid() && t < 0 && t < -(e.size.width.value * this.slideTrigger));
    d(this, "slideRight", (t, e) => e.size.isValid() && t > 0 && t > e.size.width.value * this.slideTrigger);
    d(this, "slideUp", (t, e) => e.size.isValid() && t < 0 && t < -(e.size.height.value * this.slideTrigger));
    d(this, "slideDown", (t, e) => e.size.isValid() && t > 0 && t > e.size.height.value * this.slideTrigger);
  }
  start(t, e) {
    e.enableGestures && (this.startTime = Date.now(), this.startX = t.touches[0].clientX, this.startY = t.touches[0].clientY);
  }
  end(t, e, o, s, n, c) {
    this.prevTouchTime = this.endTime, this.endTime = Date.now();
    const a = t.changedTouches[0].clientX - this.startX, u = t.changedTouches[0].clientY - this.startY;
    if (this.tap(a, u)) {
      c.toggle(e, n, !0);
      return;
    }
    e.enableGestures && (this.slideRight(a, s) ? o.show(z.prev) : this.slideLeft(a, s) && o.show(z.next));
  }
}
const ae = {
  key: 2,
  class: "complements"
}, ce = /* @__PURE__ */ C("div", { class: "remainder upper" }, null, -1), ue = /* @__PURE__ */ C("div", { class: "remainder lower" }, null, -1), Ie = /* @__PURE__ */ $({
  __name: "VueFlux",
  props: {
    options: { default: () => ({}) },
    rscs: {},
    transitions: {}
  },
  emits: ["created", "mounted", "unmounted", "play", "stop", "show", "optionsUpdated", "transitionsUpdated", "resourcesPreloadStart", "resourcesPreloadEnd", "resourcesLazyloadStart", "resourcesLazyloadEnd", "fullscreenEnter", "fullscreenExit", "transitionStart", "transitionCancel", "transitionEnd"],
  setup(r, { expose: t, emit: e }) {
    const o = r, s = e, n = g(null), c = g(null), a = g(null), u = b({
      allowFullscreen: !1,
      allowToSkipTransition: !0,
      aspectRatio: "16:9",
      autohideTime: 2500,
      autoplay: !1,
      bindKeys: !1,
      delay: 5e3,
      enableGestures: !1,
      infinite: !0,
      lazyLoad: !0,
      lazyLoadAfter: 5
    }), l = new re(), i = new oe(u, l, s), p = i.resources, m = i.transitions, y = new dt(n, u, s), _ = new ne(u, i), v = new ie(), x = new le(), E = () => {
      Object.assign(u, o.options), v.setup(u, l), _.setup();
    };
    it(o.options, () => {
      E(), s("optionsUpdated");
    });
    async function V(j) {
      const P = i.status.value === Y.playing;
      P && await i.stop(!0), await {
        rscs: async () => await J(),
        transitions: () => k()
      }[j](), P && i.play();
    }
    async function J() {
      i.resource.reset();
      const j = u.lazyLoad ? u.lazyLoadAfter : o.rscs.length;
      try {
        await p.update(mt(o.rscs), j, y.size);
      } catch (P) {
        console.error(P);
      }
      p.list.length && i.resource.init(p);
    }
    it(
      () => o.rscs,
      async () => {
        await V("rscs");
      },
      { deep: !1 }
    );
    function k() {
      i.transition.reset(), m.update(mt(o.transitions)), i.transition.init(m);
    }
    it(
      o.transitions,
      async () => {
        await V("transitions"), s("transitionsUpdated");
      },
      { deep: !1 }
    ), at(async () => {
      E(), await y.updateSize(), y.addResizeListener(), i.setup(a), k(), await J(), u.autoplay === !0 && i.play(), s("mounted");
    }), ct(() => {
      l.clear(), y.removeResizeListener(), _.removeKeyListener(), s("unmounted");
    });
    const R = S(() => y.size.isValid() ? y.inFullScreen() ? {
      width: "100% !important",
      height: "100% !important"
    } : y.size.toPx() : {});
    return t({
      show: i.show.bind(i),
      play: i.play.bind(i),
      stop: i.stop.bind(i),
      getPlayer: () => i,
      size: y.size
    }), s("created"), (j, P) => (f(), D("div", {
      ref_key: "$el",
      ref: n,
      class: "vue-flux",
      style: H(R.value),
      onMousemove: P[3] || (P[3] = (M) => h(v).toggle(u, h(l), !0)),
      onMouseleave: P[4] || (P[4] = (M) => h(v).toggle(u, h(l), !1)),
      onDblclick: P[5] || (P[5] = (M) => h(y).toggleFullScreen()),
      onTouchstart: P[6] || (P[6] = (M) => h(x).start(M, u)),
      onTouchend: P[7] || (P[7] = (M) => h(x).end(M, u, h(i), h(y), h(l), h(v)))
    }, [
      /* eslint-disable vue/html-indent */
      h(i).transition.current !== null && h(y).size.isValid() && h(i).resource.from !== null && h(i).resource.to !== null ? (f(), w(h(Kt), {
        key: 0,
        ref_key: "$transition",
        ref: c,
        transition: h(i).transition.current.component,
        size: h(y).size,
        from: h(i).resource.from.rsc,
        to: h(i).resource.to.rsc,
        "display-component": a.value,
        options: h(i).transition.current.options,
        onReady: P[0] || (P[0] = (M) => {
          var ft;
          return (ft = c.value) == null ? void 0 : ft.start();
        }),
        onStart: P[1] || (P[1] = (M) => h(i).start()),
        onEnd: P[2] || (P[2] = (M) => h(i).end())
      }, null, 8, ["transition", "size", "from", "to", "display-component", "options"])) : O("", !0),
      h(i).resource.current !== null ? (f(), w(F(h(i).resource.current.rsc.display.component), U({
        key: 1,
        ref_key: "$displayComponent",
        ref: a,
        size: h(y).size,
        rsc: h(i).resource.current.rsc
      }, h(i).resource.current.rsc.display.props), null, 16, ["size", "rsc"])) : O("", !0),
      h(y).size.isValid() ? (f(), D("div", ae, [
        B(j.$slots, "preloader", {
          loader: h(p).loader
        }),
        B(j.$slots, "caption", { player: h(i) }),
        ce,
        B(j.$slots, "controls", {
          mouseOver: h(v).isOver,
          player: h(i)
        }),
        ue,
        B(j.$slots, "index", {
          mouseOver: h(v).isOver,
          displaySize: h(y).size,
          player: h(i)
        }),
        B(j.$slots, "pagination", { player: h(i) })
      ])) : O("", !0)
    ], 36));
  }
}), Ge = /* @__PURE__ */ $({
  __name: "FluxCaption",
  props: {
    player: {}
  },
  setup(r) {
    const t = r, { resource: e, transition: o } = t.player, s = S(() => e.current === null || e.current.rsc.caption === null ? "&nbsp;" : e.current.rsc.caption), n = S(() => {
      const c = ["flux-caption"];
      return o.current === null && e.current !== null && e.current.rsc.caption.length > 0 && c.push("visible"), c;
    });
    return (c, a) => (f(), D("div", {
      class: nt(n.value)
    }, [
      B(c.$slots, "default", { caption: s.value }, () => [
        Pt(wt(s.value), 1)
      ])
    ], 2));
  }
}), pe = /* @__PURE__ */ C("polyline", { points: "64,18 22,50 64,82" }, null, -1), he = /* @__PURE__ */ $({
  __name: "Prev",
  setup(r) {
    return (t, e) => (f(), w(h(et), { class: "prev top left" }, {
      default: N(() => [
        pe
      ]),
      _: 1
    }));
  }
}), de = /* @__PURE__ */ C("polygon", { points: "32,12 82,50 32,88" }, null, -1), fe = /* @__PURE__ */ $({
  __name: "Play",
  setup(r) {
    return (t, e) => (f(), w(h(et), { class: "play" }, {
      default: N(() => [
        de
      ]),
      _: 1
    }));
  }
}), me = /* @__PURE__ */ C("line", {
  x1: "32",
  y1: "22",
  x2: "32",
  y2: "78"
}, null, -1), ye = /* @__PURE__ */ C("line", {
  x1: "68",
  y1: "22",
  x2: "68",
  y2: "78"
}, null, -1), ge = /* @__PURE__ */ $({
  __name: "Stop",
  setup(r) {
    return (t, e) => (f(), w(h(et), { class: "pause" }, {
      default: N(() => [
        me,
        ye
      ]),
      _: 1
    }));
  }
}), ve = /* @__PURE__ */ C("polyline", { points: "36,18 78,50 36,82" }, null, -1), we = /* @__PURE__ */ $({
  __name: "Next",
  setup(r) {
    return (t, e) => (f(), w(h(et), { class: "next top right" }, {
      default: N(() => [
        ve
      ]),
      _: 1
    }));
  }
}), ze = {
  key: 0,
  class: "flux-controls"
}, Ke = /* @__PURE__ */ $({
  __name: "FluxControls",
  props: {
    mouseOver: { default: void 0 },
    player: {}
  },
  setup(r) {
    const t = r, e = S(() => !(t.player.resource.current === null || t.mouseOver !== void 0 && h(t.mouseOver) === !1));
    return (o, s) => (f(), w(zt, { name: "fade" }, {
      default: N(() => [
        e.value ? (f(), D("div", ze, [
          q(he, {
            onClick: s[0] || (s[0] = (n) => o.player.show(h(z).prev))
          }),
          (o.player.status.value || o.player.status) === h(Y).stopped ? (f(), w(fe, {
            key: 0,
            onClick: s[1] || (s[1] = (n) => o.player.play(h(z).next, 1))
          })) : O("", !0),
          (o.player.status.value || o.player.status) === h(Y).playing ? (f(), w(ge, {
            key: 1,
            onClick: s[2] || (s[2] = (n) => o.player.stop())
          })) : O("", !0),
          q(we, {
            onClick: s[3] || (s[3] = (n) => o.player.show(h(z).next))
          })
        ])) : O("", !0)
      ]),
      _: 1
    }));
  }
}), $e = /* @__PURE__ */ C("rect", {
  x: "17.5",
  y: "17.5",
  width: "12px",
  height: "12px"
}, null, -1), _e = /* @__PURE__ */ C("rect", {
  x: "17.5",
  y: "43",
  width: "12px",
  height: "12px"
}, null, -1), be = /* @__PURE__ */ C("rect", {
  x: "17.5",
  y: "68.5",
  width: "12px",
  height: "12px"
}, null, -1), xe = /* @__PURE__ */ C("rect", {
  x: "43",
  y: "17.5",
  width: "12px",
  height: "12px"
}, null, -1), ke = /* @__PURE__ */ C("rect", {
  x: "43",
  y: "43",
  width: "12px",
  height: "12px"
}, null, -1), De = /* @__PURE__ */ C("rect", {
  x: "43",
  y: "68.5",
  width: "12px",
  height: "12px"
}, null, -1), Se = /* @__PURE__ */ C("rect", {
  x: "68.5",
  y: "17.5",
  width: "12px",
  height: "12px"
}, null, -1), Ce = /* @__PURE__ */ C("rect", {
  x: "68.5",
  y: "43",
  width: "12px",
  height: "12px"
}, null, -1), Pe = /* @__PURE__ */ C("rect", {
  x: "68.5",
  y: "68.5",
  width: "12px",
  height: "12px"
}, null, -1), Le = /* @__PURE__ */ $({
  __name: "Button",
  props: {
    mouseOver: { default: void 0 }
  },
  setup(r) {
    const t = r, e = S(
      () => [!0, void 0].includes(h(t.mouseOver))
    );
    return (o, s) => (f(), w(zt, { name: "fade" }, {
      default: N(() => [
        e.value ? (f(), w(h(et), {
          key: 0,
          class: "toggle bottom left"
        }, {
          default: N(() => [
            $e,
            _e,
            be,
            xe,
            ke,
            De,
            Se,
            Ce,
            Pe
          ]),
          _: 1
        })) : O("", !0)
      ]),
      _: 1
    }));
  }
}), Re = /* @__PURE__ */ $({
  __name: "Thumb",
  props: {
    rsc: {},
    size: {}
  },
  setup(r) {
    return (t, e) => (f(), D("li", null, [
      (f(), w(F(t.rsc.transition.component), {
        rsc: t.rsc,
        size: t.size.value,
        title: t.rsc.caption
      }, null, 8, ["rsc", "size", "title"]))
    ]));
  }
});
function Te(r, t) {
  const e = S(() => {
    let { width: s, height: n } = r.toValue();
    return s = s / 4.2, n = s * 90 / 160, s > 160 && (s = 160, n = 90), new T({
      width: s,
      height: n
    });
  });
  function o(s) {
    const { current: n } = t.resource;
    return n === null || n.index !== s ? "" : "current";
  }
  return { size: e, getClass: o };
}
const Fe = 500, Ee = /* @__PURE__ */ $({
  __name: "List",
  props: {
    displaySize: {},
    player: {},
    mouseOver: { default: void 0 }
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(!1), n = S(() => {
      const l = [];
      return s.value && l.push("visible"), l;
    });
    async function c() {
      o.value !== null && (e.player.stop(), s.value = !0, await Z(), o.value.clientHeight, o.value.style.marginTop = "0");
    }
    function a(l) {
      var i;
      o.value !== null && ((i = e.player.resource.current) == null ? void 0 : i.index) !== l && (e.mouseOver !== void 0 && (o.value.clientHeight, o.value.style.marginTop = "100%"), setTimeout(() => {
        s.value = !1, l !== null && e.player.show(l);
      }, Fe));
    }
    const u = Te(e.displaySize, e.player);
    return t({ show: c }), (l, i) => (f(), D("nav", {
      class: nt(n.value),
      onClick: i[0] || (i[0] = (p) => a(null))
    }, [
      C("ul", {
        ref_key: "$list",
        ref: o
      }, [
        (f(!0), D(Q, null, tt(l.player.resources.list, (p, m) => (f(), w(Re, {
          key: m,
          rsc: p.resource,
          size: h(u).size,
          class: nt(h(u).getClass(m)),
          onClick: (y) => a(m)
        }, null, 8, ["rsc", "size", "class", "onClick"]))), 128))
      ], 512)
    ], 2));
  }
}), Oe = {
  key: 0,
  class: "flux-index"
}, Ue = /* @__PURE__ */ $({
  __name: "FluxIndex",
  props: {
    mouseOver: { default: void 0 },
    displaySize: {},
    player: {}
  },
  setup(r) {
    const t = r, e = g(null), o = S(
      () => t.player.resources.list.length > 0
    );
    return (s, n) => o.value ? (f(), D("div", Oe, [
      s.mouseOver ? (f(), w(Le, {
        key: 0,
        "mouse-over": s.mouseOver,
        onClick: n[0] || (n[0] = (c) => {
          var a;
          return (a = e.value) == null ? void 0 : a.show();
        })
      }, null, 8, ["mouse-over"])) : O("", !0),
      q(Ee, {
        ref_key: "$fluxIndexList",
        ref: e,
        "display-size": s.displaySize,
        player: s.player,
        "mouse-over": s.mouseOver
      }, null, 8, ["display-size", "player", "mouse-over"])
    ])) : O("", !0);
  }
}), Ve = {
  key: 0,
  class: "flux-pagination"
}, Be = ["title", "onClick"], Je = /* @__PURE__ */ $({
  __name: "FluxPagination",
  props: {
    player: {}
  },
  setup(r) {
    const t = r, {
      player: { resources: e, resource: o, transition: s }
    } = t, n = S(() => e.list.length > 0), c = (u) => u.resource.caption, a = (u, l) => {
      var m;
      const i = [l];
      let p = ((m = o.current) == null ? void 0 : m.index) === u;
      return s.current !== null && (p = !1), p === !0 && i.push("active"), i;
    };
    return (u, l) => n.value ? (f(), D("nav", Ve, [
      C("ul", null, [
        (f(!0), D(Q, null, tt(u.player.resources.list, (i, p) => (f(), D("li", { key: p }, [
          B(u.$slots, "default", {
            index: p,
            rsc: i,
            title: c(i),
            cssClass: a(p, "custom-pagination-item")
          }, () => [
            C("span", {
              title: c(i),
              class: nt(a(p, "pagination-item")),
              onClick: (m) => u.player.show(p)
            }, null, 10, Be)
          ])
        ]))), 128))
      ])
    ])) : O("", !0);
  }
}), Me = { class: "preloader" }, Ae = {
  key: 0,
  class: "spinner"
}, We = { class: "pct" }, Ne = /* @__PURE__ */ C("div", { class: "border" }, null, -1), Ze = /* @__PURE__ */ $({
  __name: "FluxPreloader",
  props: {
    loader: {}
  },
  setup(r) {
    return (t, e) => {
      var o, s, n;
      return f(), D("div", Me, [
        B(t.$slots, "default", {
          loader: t.loader,
          preloading: (o = t.loader.value) == null ? void 0 : o.preLoading.length,
          lazyloading: (s = t.loader.value) == null ? void 0 : s.lazyLoading.length,
          pct: (n = t.loader.value) == null ? void 0 : n.progress
        }, () => {
          var c, a;
          return [
            (c = t.loader.value) != null && c.preLoading.length ? (f(), D("div", Ae, [
              C("div", We, wt((a = t.loader.value) == null ? void 0 : a.progress) + "%", 1),
              Ne
            ])) : O("", !0)
          ];
        })
      ]);
    };
  }
});
function L(r, t) {
  Object.assign(r, { direction: z.next }, t);
}
const qe = /* @__PURE__ */ $({
  __name: "Fade",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      totalDuration: 1200,
      easing: "ease-in"
    });
    L(s, e.options);
    const n = {
      zIndex: 1
    };
    return t({
      onPlay: () => {
        o.value.transform({
          transition: `opacity ${s.totalDuration}ms ${s.easing}`,
          opacity: 0
        });
      },
      totalDuration: s.totalDuration
    }), (a, u) => (f(), w(F(a.from.transition.component), {
      ref_key: "$from",
      ref: o,
      rsc: a.from,
      size: a.size,
      css: n
    }, null, 8, ["rsc", "size"]));
  }
}), Qe = /* @__PURE__ */ $({
  __name: "Kenburn",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      totalDuration: 1500,
      easing: "linear"
    });
    L(s, e.options);
    const n = [
      {
        scale: "1.7",
        translateX: "-35%",
        translateY: "-35%",
        originX: "top",
        originY: "left"
      },
      {
        scale: "1.7",
        translateX: "35%",
        translateY: "-35%",
        originX: "top",
        originY: "right"
      },
      {
        scale: "1.7",
        translateX: "-35%",
        translateY: "35%",
        originX: "bottom",
        originY: "left"
      },
      {
        scale: "1.7",
        translateX: "35%",
        translateY: "35%",
        originX: "bottom",
        originY: "right"
      }
    ], c = Math.floor(Math.random() * 4), a = n[c], u = {
      transformOrigin: a.originX + " " + a.originY
    };
    return t({
      onPlay: () => {
        o.value.transform({
          transition: `all ${s.totalDuration}ms ${s.easing}`,
          transform: `scale(${a.scale}) translate(${a.translateX}, ${a.translateY})`,
          opacity: 0
        });
      },
      totalDuration: s.totalDuration
    }), (i, p) => (f(), w(F(i.from.transition.component), {
      ref_key: "$from",
      ref: o,
      rsc: i.from,
      size: i.size,
      css: u
    }, null, 8, ["rsc", "size"]));
  }
}), ts = /* @__PURE__ */ $({
  __name: "Swipe",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = b({
      totalDuration: 1400,
      easing: "ease-in-out"
    });
    L(n, e.options);
    const c = {
      position: "absolute",
      top: 0,
      display: "flex",
      flexWrap: "nowrap"
    }, a = {
      flex: "0 0 auto"
    };
    return {
      [z.prev]: () => {
        Object.assign(c, {
          right: 0,
          justifyContent: "flex-end"
        });
      },
      [z.next]: () => {
        Object.assign(c, {
          left: 0,
          justifyContent: "flex-start"
        });
      }
    }[n.direction](), t({
      onPlay: () => {
        o.value.transform({
          transition: `width ${n.totalDuration}ms ${n.easing}`,
          width: 0
        });
      },
      totalDuration: n.totalDuration
    }), (i, p) => (f(), w(h(ht), {
      ref_key: "$wrapper",
      ref: o,
      size: i.size,
      css: c
    }, {
      default: N(() => [
        (f(), w(F(i.from.transition.component), {
          ref_key: "$from",
          ref: s,
          rsc: i.from,
          size: i.size,
          css: a
        }, null, 8, ["rsc", "size"]))
      ]),
      _: 1
    }, 8, ["size"]));
  }
}), es = /* @__PURE__ */ $({
  __name: "Slide",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = g(null), c = b({
      totalDuration: 1400,
      easing: "ease-in-out"
    });
    L(c, e.options);
    const a = `transform ${c.totalDuration}ms ${c.easing}`, u = {
      size: new T({
        width: e.size.width.value * 2,
        height: e.size.height.value
      }),
      css: {
        display: "flex",
        flexWrap: "nowrap"
      }
    };
    let l, i;
    ({
      [z.prev]: () => {
        l = e.to, i = e.from, u.css.transform = "translateX(-50%)";
      },
      [z.next]: () => {
        l = e.from, i = e.to;
      }
    })[c.direction]();
    const m = {
      [z.prev]: () => {
        o.value.transform({
          transition: a,
          transform: "translateX(0)"
        });
      },
      [z.next]: () => {
        o.value.transform({
          transition: a,
          transform: "translateX(-50%)"
        });
      }
    };
    return t({
      onPlay: () => {
        m[c.direction]();
      },
      totalDuration: c.totalDuration
    }), (_, v) => (f(), w(h(ht), U({
      ref_key: "$wrapper",
      ref: o
    }, u), {
      default: N(() => [
        (f(), w(F(h(l).transition.component), {
          ref_key: "$left",
          ref: s,
          rsc: h(l),
          size: _.size
        }, null, 8, ["rsc", "size"])),
        (f(), w(F(h(i).transition.component), {
          ref_key: "$right",
          ref: n,
          rsc: h(i),
          size: _.size
        }, null, 8, ["rsc", "size"]))
      ]),
      _: 1
    }, 16));
  }
}), ss = /* @__PURE__ */ $({
  __name: "Waterfall",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      rows: 1,
      cols: 10,
      tileDuration: 600,
      tileDelay: 90,
      easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    });
    L(s, e.options);
    const n = s.tileDelay * s.cols + s.tileDuration, c = {
      [z.prev]: (u) => (s.cols - u - 1) * s.tileDelay,
      [z.next]: (u) => u * s.tileDelay
    };
    return t({
      onPlay: () => {
        o.value.transform((u, l) => {
          const i = `all ${s.tileDuration}ms ${s.easing} ${c[s.direction](l)}ms`;
          u.transform({
            transition: i,
            opacity: "0.1",
            transform: "translateY(100%)"
          });
        });
      },
      totalDuration: n
    }), (u, l) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: u.size,
      rsc: u.from
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), os = /* @__PURE__ */ $({
  __name: "Zip",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      rows: 1,
      cols: 10,
      tileDuration: 600,
      tileDelay: 80,
      easing: "ease-in"
    });
    L(s, e.options);
    const n = s.tileDelay * s.cols + s.tileDuration, c = {
      [z.prev]: (u) => (s.cols - u - 1) * s.tileDelay,
      [z.next]: (u) => u * s.tileDelay
    };
    return t({
      onPlay: () => {
        o.value.transform((u, l) => {
          const i = `all ${s.tileDuration}ms ${s.easing} ${c[s.direction](l)}ms`;
          u.transform({
            transition: i,
            opacity: "0.1",
            transform: `translateY(${l % 2 ? "-" : ""}100%)`
          });
        });
      },
      totalDuration: n
    }), (u, l) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: u.size,
      rsc: u.from
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), ns = /* @__PURE__ */ $({
  __name: "Blinds2D",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      rows: 1,
      cols: 10,
      tileDuration: 800,
      tileDelay: 100,
      easing: "linear"
    });
    L(s, e.options);
    const n = {
      [W.front]: e.from
    }, c = s.tileDelay * s.cols + s.tileDuration, a = {
      prev: (l) => (s.cols - l - 1) * s.tileDelay,
      next: (l) => l * s.tileDelay
    };
    return t({
      onPlay: () => {
        o.value.transform((l, i) => {
          const p = `all ${s.tileDuration}ms ${s.easing} ${a[s.direction](i)}ms`;
          l.transform({
            transition: p,
            opacity: "0.1",
            transform: "scaleX(0)"
          });
        });
      },
      totalDuration: c
    }), (l, i) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: l.size,
      rscs: n
    }, null, 8, ["rows", "cols", "size"]));
  }
}), is = /* @__PURE__ */ $({
  __name: "Blocks1",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var u;
    const e = r, o = g(null), s = b({
      rows: 8,
      cols: 8,
      tileDuration: 300,
      tileDelay: 1e3,
      easing: "linear"
    });
    if (L(s, e.options), !((u = e.options) != null && u.rows)) {
      const l = e.size.width.value / s.cols;
      s.rows = Math.floor(e.size.height.value / l);
    }
    const n = s.tileDelay + s.tileDuration, c = () => Math.floor(Math.random() * s.tileDelay);
    return t({
      onPlay: () => {
        o.value.transform((l) => {
          const i = `all ${s.tileDuration}ms ${s.easing} ${c()}ms`;
          l.transform({
            transition: i,
            opacity: "0",
            transform: "scale(0.3, 0.3)"
          });
        });
      },
      totalDuration: n
    }), (l, i) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: l.size,
      rsc: l.from
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), rs = /* @__PURE__ */ $({
  __name: "Blocks2",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var _;
    const e = r, o = g(null), s = g(null), n = b({
      rows: 8,
      cols: 8,
      tileDuration: 800,
      tileDelay: 80,
      easing: "ease"
    });
    L(n, e.options);
    const c = n.tileDelay * (n.rows + n.cols) + n.tileDuration;
    if (!((_ = e.options) != null && _.rows)) {
      const v = e.size.width.value / n.cols;
      n.rows = Math.floor(e.size.height.value / v);
    }
    const a = {
      rsc: null,
      css: {
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 1
      }
    }, u = JSON.parse(JSON.stringify(a));
    u.css.zIndex = 2;
    let l = {};
    ({
      prev: () => {
        u.rsc = e.to, a.rsc = e.from, l = {
          opacity: "0",
          transform: "scale(0.3)"
        };
      },
      next: () => {
        u.rsc = e.from;
      }
    })[n.direction]();
    const p = (v) => {
      const x = o.value.getRowNumber(v, n.cols);
      let V = o.value.getColNumber(v, n.cols) + x;
      return n.direction === z.prev && (V = n.rows + n.cols - V - 1), V * n.tileDelay;
    }, m = {
      prev: () => {
        o.value.transform((v, x) => {
          v.transform({
            transition: `all ${n.tileDuration}ms ${n.easing} ${p(x)}ms`,
            opacity: "1",
            transform: "scale(1)"
          });
        });
      },
      next: () => {
        o.value.transform((v, x) => {
          v.transform({
            transition: `all ${n.tileDuration}ms ${n.easing} ${p(x)}ms`,
            opacity: "0",
            transform: "scale(0.3)"
          });
        });
      }
    };
    return t({
      onPlay: () => {
        m[n.direction]();
      },
      totalDuration: c
    }), (v, x) => (f(), D("div", null, [
      q(h(X), U({
        ref_key: "$grid",
        ref: o,
        rows: n.rows,
        cols: n.cols,
        size: v.size,
        "tile-css": h(l)
      }, h(u)), null, 16, ["rows", "cols", "size", "tile-css"]),
      a.rsc !== null ? (f(), w(F(a.rsc.transition.component), U({
        key: 0,
        ref_key: "$background",
        ref: s,
        size: v.size
      }, a), null, 16, ["size"])) : O("", !0)
    ]));
  }
}), ls = /* @__PURE__ */ $({
  __name: "Concentric",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      circles: 7,
      tileDuration: 800,
      tileDelay: 150,
      easing: "linear"
    });
    L(s, e.options);
    const n = s.tileDelay * s.circles + s.tileDuration, c = (l) => l * s.tileDelay, a = {
      [z.prev]: "-90",
      [z.next]: "90"
    }[s.direction];
    return t({
      onPlay: () => {
        o.value.transform((l, i) => {
          const p = `all ${s.tileDuration}ms ${s.easing} ${c(i)}ms`;
          l.transform({
            transition: p,
            opacity: "0",
            transform: `rotateZ(${a}deg)`
          });
        });
      },
      totalDuration: n
    }), (l, i) => (f(), w(h(Dt), {
      ref_key: "$vortex",
      ref: o,
      size: l.size,
      circles: s.circles,
      rsc: l.from
    }, null, 8, ["size", "circles", "rsc"]));
  }
}), as = /* @__PURE__ */ $({
  __name: "Warp",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      circles: 7,
      tileDuration: 800,
      tileDelay: 150,
      easing: "linear"
    });
    L(s, e.options);
    const n = s.tileDelay * s.circles + s.tileDuration, c = {
      [z.prev]: (l) => (s.circles - l - 1) * s.tileDelay,
      [z.next]: (l) => l * s.tileDelay
    }, a = (l) => l % 2 === 0 ? "-90" : "90";
    return t({
      onPlay: () => {
        o.value.transform((l, i) => {
          const p = `all ${s.tileDuration}ms ${s.easing} ${c[s.direction](i)}ms`;
          l.transform({
            transition: p,
            opacity: "0",
            transform: `rotateZ(${a(i)}deg)`
          });
        });
      },
      totalDuration: n
    }), (l, i) => (f(), w(h(Dt), {
      ref_key: "$vortex",
      ref: o,
      size: l.size,
      circles: s.circles,
      rsc: l.from
    }, null, 8, ["size", "circles", "rsc"]));
  }
}), cs = /* @__PURE__ */ $({
  __name: "Camera",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = b({
      totalDuration: 900,
      backgroundColor: "#111",
      easing: "cubic-bezier(0.385, 0, 0.795, 0.560)"
    });
    L(n, e.options);
    const c = {
      alignSelf: "center",
      flex: "none"
    }, a = ut(
      e.size.toValue()
    ), u = new T({ width: a, height: a }), l = {
      boxSizing: "border-box",
      position: "absolute",
      display: "flex",
      justifyContent: "center",
      overflow: "hidden",
      borderRadius: "50%",
      border: "0 solid " + n.backgroundColor,
      top: (e.size.height.value - a) / 2 + "px",
      left: (e.size.width.value - a) / 2 + "px"
    };
    return t({
      onPlay: () => {
        o.value.transform({
          transition: `all ${n.totalDuration / 2 - 50}ms ${n.easing} 0ms`,
          borderWidth: a / 2 + "px"
        }), setTimeout(
          () => {
            s.value.hide(), o.value.transform({
              transition: `all ${n.totalDuration / 2 - 50}ms ${n.easing} 0ms`,
              borderWidth: 0
            });
          },
          n.totalDuration / 2 + 50
        );
      },
      totalDuration: n.totalDuration
    }), (p, m) => (f(), w(h(ht), {
      ref_key: "$wrapper",
      ref: o,
      size: h(u),
      css: l
    }, {
      default: N(() => [
        (f(), w(F(p.from.transition.component), {
          ref_key: "$from",
          ref: s,
          size: p.size,
          rsc: p.from,
          css: c
        }, null, 8, ["size", "rsc"]))
      ]),
      _: 1
    }, 8, ["size"]));
  }
}), us = /* @__PURE__ */ $({
  __name: "Cube",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      totalDuration: 1400,
      easing: "ease-out"
    });
    L(s, e.options), Object.assign(e.maskStyle, {
      perspective: "1600px",
      overflow: "visible"
    });
    const n = {
      front: e.from,
      left: e.to,
      right: e.to
    }, c = {
      transition: `all ${s.totalDuration}ms ${s.easing}`
    }, a = {
      [z.prev]: G.right,
      [z.next]: G.left
    }[s.direction];
    return t({
      onPlay: () => {
        e.displayComponent !== null && e.displayComponent.hide(), o.value.turn(a);
      },
      totalDuration: s.totalDuration
    }), (l, i) => (f(), w(h(pt), {
      ref_key: "$cube",
      ref: o,
      rscs: n,
      size: l.size,
      depth: l.size.width.value,
      css: c
    }, null, 8, ["size", "depth"]));
  }
}), ps = /* @__PURE__ */ $({
  __name: "Book",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = b({
      totalDuration: 1200,
      easing: "ease-out"
    });
    L(n, e.options);
    const c = new T({
      width: Math.ceil(e.size.width.value / 2),
      height: e.size.height.value
    }), a = {
      perspective: "1600px",
      width: "100%",
      height: "100%"
    }, u = new K({
      top: 0,
      left: 0
    }), l = {
      position: "absolute",
      top: 0,
      left: 0
    }, i = {
      rscs: {
        front: e.from,
        back: e.to
      },
      offsets: {
        front: new K({
          top: 0,
          left: 0
        }),
        back: new K({
          top: 0,
          left: 0
        })
      },
      origin: "",
      css: {
        position: "absolute",
        top: 0,
        left: 0
      }
    }, p = Math.ceil(e.size.width.value / 2), m = p.toString() + "px";
    e.maskStyle.overflow = "visible", {
      prev: () => {
        u.left.value = p, l.left = m, i.offsets.back.left.value = p, i.origin = "right center", i.css = {
          ...i.css
        };
      },
      next: () => {
        i.offsets.front.left.value = p, i.origin = "left center", i.css = {
          ...i.css,
          left: m
        };
      }
    }[n.direction]();
    const _ = {
      [z.prev]: "180",
      [z.next]: "-180"
    }[n.direction];
    return t({
      onPlay: () => {
        s.value.transform({
          transition: `transform ${n.totalDuration}ms ${n.easing}`,
          transform: `rotateY(${_}deg)`
        });
      },
      totalDuration: n.totalDuration
    }), (x, E) => (f(), D("div", { style: a }, [
      (f(), w(F(x.from.transition.component), {
        ref_key: "$from",
        ref: o,
        rsc: x.from,
        size: x.size,
        "view-size": h(c),
        offset: h(u),
        css: l
      }, null, 8, ["rsc", "size", "view-size", "offset"])),
      q(h(pt), {
        ref_key: "$cube",
        ref: s,
        rscs: i.rscs,
        size: x.size,
        "view-size": h(c),
        offsets: i.offsets,
        origin: i.origin,
        css: i.css
      }, null, 8, ["rscs", "size", "view-size", "offsets", "origin", "css"])
    ]));
  }
}), hs = /* @__PURE__ */ $({
  __name: "Fall",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      totalDuration: 1600,
      easing: "ease-in"
    });
    L(s, e.options), Object.assign(e.maskStyle, {
      perspective: "1600px",
      overflow: "visible"
    });
    const n = {
      transformOrigin: "center bottom"
    };
    return t({
      onPlay: () => {
        o.value.transform({
          transition: `transform ${s.totalDuration}ms ${s.easing}`,
          transform: "rotateX(-83.6deg)"
        });
      },
      totalDuration: s.totalDuration
    }), (a, u) => (f(), w(F(a.from.transition.component), {
      ref_key: "$from",
      ref: o,
      rsc: a.from,
      size: a.size,
      style: n
    }, null, 8, ["rsc", "size"]));
  }
}), ds = /* @__PURE__ */ $({
  __name: "Wave",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      rows: 1,
      cols: 8,
      tileDuration: 900,
      tileDelay: 110,
      sideColor: "#333",
      easing: "cubic-bezier(0.3, -0.3, 0.735, 0.285)"
    });
    L(s, e.options), e.maskStyle.overflow = "visible";
    const n = {
      front: e.from,
      top: e.to
    }, c = {
      left: s.sideColor,
      right: s.sideColor
    }, a = {
      perspective: "1200px"
    }, u = s.tileDelay * s.cols + s.tileDuration, l = {
      [z.prev]: (p) => (s.cols - p - 1) * s.tileDelay,
      [z.next]: (p) => p * s.tileDelay
    };
    return t({
      onPlay: () => {
        e.displayComponent && e.displayComponent.hide(), o.value.transform(
          (p, m) => {
            const y = `all ${s.tileDuration}ms ${s.easing} ${l[s.direction](m)}ms`;
            p.setCss({
              transition: y
            }), p.turn(G.bottom);
          }
        );
      },
      totalDuration: u
    }), (p, m) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: p.size,
      rscs: n,
      colors: c,
      depth: p.size.height.value,
      css: a
    }, null, 8, ["rows", "cols", "size", "depth"]));
  }
}), fs = /* @__PURE__ */ $({
  __name: "Blinds3D",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = b({
      rows: 1,
      cols: 6,
      tileDuration: 800,
      tileDelay: 150,
      easing: "ease-out"
    });
    L(s, e.options);
    const n = {
      perspective: "800px"
    }, c = {
      front: e.from,
      back: e.to
    }, a = s.tileDelay * s.cols + s.tileDuration;
    e.maskStyle.overflow = "visible";
    const u = {
      prev: (p) => (s.cols - p - 1) * s.tileDelay,
      next: (p) => p * s.tileDelay
    }, l = {
      prev: G.backl,
      next: G.backr
    }[s.direction];
    return t({
      onPlay: () => {
        e.displayComponent && e.displayComponent.hide(), o.value.transform(
          (p, m) => {
            const y = `all ${s.tileDuration}ms ${s.easing} ${u[s.direction](m)}ms`;
            p.setCss({
              transition: y
            }), p.turn(l);
          }
        );
      },
      totalDuration: a
    }), (p, m) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: p.size,
      rscs: c,
      css: n
    }, null, 8, ["rows", "cols", "size"]));
  }
}), ms = /* @__PURE__ */ $({
  __name: "Round1",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var m;
    const e = r, o = g(null), s = b({
      rows: 0,
      cols: 8,
      tileDuration: 800,
      tileDelay: 150,
      easing: "ease-out"
    });
    L(s, e.options);
    const n = {
      front: e.from,
      back: e.to
    }, c = {
      perspective: "800px"
    };
    if (e.maskStyle.overflow = "visible", !((m = e.options) != null && m.rows)) {
      const y = e.size.width.value / s.cols;
      s.rows = Math.floor(e.size.height.value / y);
    }
    const a = s.rows > s.cols ? s.rows : s.cols, u = s.tileDelay * a * 2, l = (y) => {
      const _ = o.value.getRowNumber(y, s.cols);
      let x = o.value.getColNumber(y, s.cols) + _;
      return s.direction === z.prev && (x = s.rows + s.cols - x - 1), x * s.tileDelay;
    }, i = {
      [z.prev]: G.backl,
      [z.next]: G.backr
    }[s.direction];
    return t({
      onPlay: () => {
        e.displayComponent && e.displayComponent.hide(), o.value.transform(
          (y, _) => {
            const v = `all ${s.tileDuration}ms ${s.easing} ${l(_)}ms`;
            y.setCss({
              transition: v
            }), y.turn(i);
          }
        );
      },
      totalDuration: u
    }), (y, _) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: y.size,
      rscs: n,
      css: c
    }, null, 8, ["rows", "cols", "size"]));
  }
}), ys = /* @__PURE__ */ $({
  __name: "Round2",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var i;
    const e = r, o = g(null), s = b({
      rows: 0,
      cols: 9,
      tileDuration: 800,
      tileDelay: 100,
      rotateX: -540,
      easing: "linear"
    });
    L(s, e.options), e.maskStyle.overflow = "visible";
    const n = {
      perspective: "1200px"
    }, c = {
      backfaceVisibility: "hidden"
    };
    if (!((i = e.options) != null && i.rows)) {
      const p = e.size.width.value / s.cols;
      s.rows = Math.floor(e.size.height.value / p);
    }
    const a = (s.cols / 2 + s.rows) * (s.tileDelay * 2), u = (p) => {
      const m = o.value.getRowNumber(p, s.cols), y = o.value.getColNumber(p, s.cols);
      let _, v;
      return s.direction === z.prev ? (_ = Math.abs(s.rows / 2 - 0.5 - m), v = Math.abs(s.cols - y)) : (_ = Math.abs(s.rows / 2 - 0.5 - m), v = Math.abs(y)), (_ + v - 1) * s.tileDelay;
    };
    return t({
      onPlay: () => {
        o.value.transform((p, m) => {
          const y = `all ${s.tileDuration}ms ${s.easing} ${u(m)}ms`;
          p.transform({
            transition: y,
            opacity: "0",
            transform: `rotateY(${s.rotateX.toString()}deg)`
          });
        });
      },
      totalDuration: a
    }), (p, m) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: p.size,
      depth: 0,
      rsc: p.from,
      css: n,
      "tile-css": c
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), gs = /* @__PURE__ */ $({
  __name: "Explode",
  props: {
    options: {},
    size: {},
    from: {},
    to: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var l;
    const e = r, o = g(null), s = b({
      rows: 9,
      cols: 9,
      tileDuration: 300,
      tileDelay: 100,
      easing: "linear"
    });
    L(s, e.options);
    const n = {
      overflow: "visible"
    };
    if (e.maskStyle.overflow = "visible", !((l = e.options) != null && l.rows)) {
      const i = e.size.width.value / s.cols;
      s.rows = Math.floor(e.size.height.value / i);
    }
    const c = (s.cols / 2 + s.rows / 2) * (s.tileDelay * 2), a = (i) => {
      const p = o.value.getRowNumber(i, s.cols), m = o.value.getColNumber(i, s.cols), y = Math.abs(s.rows / 2 - 0.5 - p), _ = Math.abs(s.cols / 2 - 0.5 - m);
      return (y + _ - 1) * s.tileDelay;
    };
    return t({
      onPlay: () => {
        o.value.transform((i, p) => {
          const m = `all ${s.tileDuration}ms ${s.easing} ${a(p)}ms`;
          i.transform({
            transition: m,
            borderRadius: "100%",
            opacity: "0",
            transform: "scale(2)"
          });
        });
      },
      totalDuration: c
    }), (i, p) => (f(), w(h(X), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: i.size,
      rsc: i.from,
      css: n
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
});
export {
  ns as Blinds2D,
  fs as Blinds3D,
  is as Blocks1,
  rs as Blocks2,
  ps as Book,
  cs as Camera,
  ls as Concentric,
  us as Cube,
  z as Directions,
  gs as Explode,
  qe as Fade,
  hs as Fall,
  et as FluxButton,
  Ge as FluxCaption,
  Ke as FluxControls,
  pt as FluxCube,
  X as FluxGrid,
  rt as FluxImage,
  Ue as FluxIndex,
  Je as FluxPagination,
  He as FluxParallax,
  Ze as FluxPreloader,
  Kt as FluxTransition,
  Dt as FluxVortex,
  ht as FluxWrapper,
  Ye as Img,
  Qe as Kenburn,
  oe as Player,
  Zt as PlayerResource,
  qt as PlayerTransition,
  K as Position,
  A as ResizeTypes,
  Mt as Resource,
  ms as Round1,
  ys as Round2,
  W as Sides,
  T as Size,
  es as Slide,
  Y as Statuses,
  ts as Swipe,
  G as Turns,
  Ie as VueFlux,
  as as Warp,
  ss as Waterfall,
  ds as Wave,
  os as Zip,
  L as useTransition
};
